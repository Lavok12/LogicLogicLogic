/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.kotlin.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-scripting-jsr223:1.9.10")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.9.23")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-core:1.6.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-cbor:1.6.0") 
    implementation("org.slf4j:slf4j-api:1.7.36")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0")

    val kotlinVersion = "2.1.0"

    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-scripting-common:$kotlinVersion")
        implementation("org.jetbrains.kotlin:kotlin-scripting-jvm:$kotlinVersion")
        implementation("org.jetbrains.kotlin:kotlin-scripting-jvm-host:$kotlinVersion")
        implementation("org.jetbrains.kotlin:kotlin-scripting-jsr223:$kotlinVersion")
        implementation("org.jetbrains.kotlin:kotlin-script-runtime:$kotlinVersion")
    }



    // This dependency is used by the application.
    implementation(libs.guava)

    implementation(fileTree("libs") {
        include("*.jar")
    })
    implementation(fileTree("libs/websockets") {
        include("*.jar")
    })
}


testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("2.1.20")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    mainClass.set("la.vok.MainKt")
}


tasks.jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes["Main-Class"] = "la.vok.MainKt"
    }

    // Включаем выходные файлы основного source set как файлы, а не как содержимое архива
    from(project.fileTree("build/classes/kotlin/main")) {
        into("la/vok") // Сохраняем структуру пакетов внутри JAR
    }

    from({
        configurations.runtimeClasspath.get()
            .filter { it.name.endsWith(".jar") }
            .map { zipTree(it) }
    })
}
